#version 450

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
    vec3 camPosition;
    vec3 lightsource;
} ubo;

layout(binding = 1) uniform OptionBufferObject {
    float l0; // 0.04
    float k; //1.0
    float a; //0.05
    float g; //0.98 ?
    float delta_t; //variable 
    float max_dist; //1.0 - 1.1
    uint nb_particles; // 300000000000 !
    uint nb_triangles;
    uint nb_points;
    uint nb_chunks;
    float color; // ~ 3
    float epsilon; // 0.001
    float blending;
} opt;

struct Particle {
    vec3 position;
    vec3 velocity;
};

struct Vertex {
    vec3 pos;
    vec3 color;
};

struct Statend {
    uint start;
    uint end;
};


layout(std140, binding = 2) readonly buffer ParticleSSBOIn {
    Particle particlesOld[ ];
};

layout(std140, binding = 3)  buffer ParticleSSBOout {
    Particle particlesNew[ ];
};

layout(std140, binding = 4) buffer SommetsSSBOIn {
    Vertex points[ ];
};

layout(std430, binding = 5) buffer TrianglesSSBOIn {
    uint triangles[ ];
};

layout(std430, binding = 6) buffer ChunkSSBO {
    uint chunks[ ];
};
layout(std430, binding = 7) buffer IndexSSBOIn {
    uint particlesIndex[ ];
};
layout(std430, binding = 8) buffer ChunkIndexSSBOIn {
    Statend chunkIndex[ ];
};

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

vec3 ressort(Particle p, Particle q)
{
    float d = distance(p.position,q.position);
    if(dot(p.position - q.position,p.position - q.position) == 0)
        return(vec3(0.0,0.0,0.0));
    return(opt.k*(opt.l0 - d)*normalize(p.position - q.position));
}

vec3 frottements(Particle p, Particle q)
{
    float d = distance(p.velocity,q.velocity);
    if(dot(p.velocity - q.velocity,p.velocity - q.velocity) == 0)
        return(vec3(0.0,0.0,0.0));
    return(-opt.a*normalize(p.velocity - q.velocity));
}

//pure magie venue d'internet - floats random entre 0 et 1
float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

void collisionsCheck(uint index, vec3 v)
{
    vec3 dv = opt.delta_t*v;
    vec3 new_v = v;
    int last_hit = -1;
    for(int j = 0; j < 5; j++)
    {
        int k = -1;
        float tmin = 1.0;
        for(int i = 0; i < opt.nb_triangles; i++)
        {
            if(i != last_hit)
            {
                vec3 a = points[triangles[3*i]].pos;
                vec3 b = points[triangles[3*i+1]].pos;
                vec3 c = points[triangles[3*i+2]].pos;
                /* maths : système 
                    p + tdv = a + x*(b-a) + y*(c-a)
                    a - p = tdv + x*(a-b) + y*(a-c)
                    matrice 3,3 (dv,(a-b),(a-c)) = M
                    solution M*(t,x,y) = (a-p)
                */
                mat3 M = mat3(dv,(a-b),(a-c));
                vec3 N = normalize(cross(b-a,c-a));
                if(determinant(M) != 0)
                {
                    vec3 solution = inverse(M)*(a - particlesOld[index].position);
                    float t = solution.x;
                    float x = solution.y;
                    float y = solution.z;
                    if(t >= 0.0  && t < tmin //< 1
                        && x >= 0.0 && x+y <= 1.0
                        && y >= 0.0
                        ) 
                    {
                        k = i;
                        tmin = t;
                    }
                }
            }
        }
        if(k != -1)
        {

            vec3 a = points[triangles[3*k]].pos;
            vec3 b = points[triangles[3*k+1]].pos;
            vec3 c = points[triangles[3*k+2]].pos;
            vec3 N = normalize(cross(b-a,c-a));
            if(dot(N,dv) < 0 ) N = -N;
            new_v = (1-opt.a)*reflect(new_v,N);
            dv = (1-opt.a)*(1.0-tmin)*reflect(dv,N);
            particlesNew[index].velocity = new_v;
            last_hit = k;
            particlesNew[index].position = particlesOld[index].position + tmin*dv;
            /* code pour debug des collisions si besoin est
            points[opt.nb_points + index*6].pos = particlesOld[index].position + tmin*dv;
            points[opt.nb_points + index*6].color = vec3(1,0,0);//rouge.
            points[opt.nb_points + index*6 +1].pos = a;
            points[opt.nb_points + index*6 +1].color = vec3(1,1,0); //jaune/orange
            points[opt.nb_points + index*6 +2].pos = b;
            points[opt.nb_points + index*6 +2].color = vec3(1,0,1); // violet
            points[opt.nb_points + index*6 +3].pos = c;
            points[opt.nb_points + index*6 +3].color = vec3(0,1,0); //vert
            */
        }
        else
        {
            particlesNew[index].position = particlesOld[index].position + tmin*dv;
            particlesNew[index].velocity = new_v;
            if(particlesNew[index].position.y < -11)
            {
                float a = rand(particlesNew[index].position.xz)/4;
                //pos en x
                float b = 1.98*rand(particlesNew[index].velocity.xz)-0.99;
                float c = rand(vec2(particlesNew[index].velocity.y, particlesNew[index].velocity.y));
                //hauteur
                particlesNew[index].position = vec3(a-0.99,c/4,b);
                particlesNew[index].velocity = vec3(0,0,0);


            }
            return;
        }
    }
}


int modulo(int x,int N){
    return (x % N + N) %N;
}

uint hash(ivec3 pos)
{
    return(uint(mod(pos.x*727 + pos.y*359 + pos.z*547, opt.nb_chunks)));
}
ivec3 to_chunk_coords(vec3 point)
{
    const float size = opt.l0*opt.max_dist;
    return(ivec3(  int(point.x / size),
                    int(point.y / size), 
                    int(point.z / size)
                    ));
}


vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main()
{
    uint index = gl_GlobalInvocationID.x;  

    if(index >= opt.nb_particles)
    {
        return; //sécuritée !!
    }
    //début PFD
    float size = opt.l0*opt.max_dist;

    const ivec3 voisins[27] = {
        ivec3(-1,-1,-1),
        ivec3(-1,-1,0),
        ivec3(-1,-1,1),
        ivec3(0,-1,-1),
        ivec3(0,-1,0),
        ivec3(0,-1,1),
        ivec3(1,-1,-1),
        ivec3(1,-1,0),
        ivec3(1,-1,1),

        ivec3(-1,0,-1),
        ivec3(-1,0,0),
        ivec3(-1,0,1),
        ivec3(0,0,-1),
        ivec3(0,0,0),
        ivec3(0,0,1),
        ivec3(1,0,-1),
        ivec3(1,0,0),
        ivec3(1,0,1),

        ivec3(-1,1,-1),
        ivec3(-1,1,0),
        ivec3(-1,1,1),
        ivec3(0,1,-1),
        ivec3(0,1,0),
        ivec3(0,1,1),
        ivec3(1,1,-1),
        ivec3(1,1,0),
        ivec3(1,1,1),
    };
    //uint p_count = 0;
    //bool is_zero_here = false;
    ivec3 chunk_coords = to_chunk_coords(particlesOld[index].position);
    vec3 a = -opt.g*vec3(0.0,1.0,0.0); // gravité !!
    for(int i = 0; i < 27; i++)
    {
        uint chunk_pos = hash(chunk_coords + voisins[i]);
        //if(chunk_pos >= 0 && chunk_pos < opt.nb_chunks)
        for(uint j = chunkIndex[chunk_pos].start; j < chunkIndex[chunk_pos].end; j++)
        {
            if(particlesIndex[j] != index && distance(particlesOld[index].position, 
                particlesOld[particlesIndex[j]].position) < size)
            {
                a +=  ressort(particlesOld[index], particlesOld[particlesIndex[j]]) 
                  + frottements(particlesOld[index], particlesOld[particlesIndex[j]]);
            }
            //is_zero_here = is_zero_here || (particlesIndex[j] == 0);
        }
        //p_count += chunkIndex[chunk_pos].end - chunkIndex[chunk_pos].start;
    }

    /*for(int i = 0; i < opt.nb_particles; i++)
    {
        if(i != index && distance(particlesOld[index].position, 
            particlesOld[i].position) < size)
        {
            a +=  ressort(particlesOld[index], particlesOld[i]) 
                + frottements(particlesOld[index], particlesOld[i]);
        }
    }*/



    vec3 v = particlesOld[index].velocity  + a*opt.delta_t;
    particlesNew[index].velocity = v;
    //particlesNew[index].position = particlesOld[index].position + v*opt.delta_t;
    collisionsCheck(index,v);


    //fin de la physique, partie cosmétique !

    const vec3 cone[6] = {
            vec3(0.0,0.0,1.0),
            vec3(0.0,0.0,-1.0),
            vec3(0.0,1.0,0.0),
            vec3(0.0,-1.0,0.0),
            vec3(1.0,0.0,0.0),
            vec3(-1.0,0.0,0.0)
        };

    float speed = sqrt(dot(particlesNew[index].velocity,particlesNew[index].velocity));
    if(speed > opt.color) speed = opt.color;
    for(int i = 0; i < 6 ; i++)
    {

        points[opt.nb_points + index*6 + i].pos = particlesNew[index].position + (opt.l0/2)*cone[i];
        //speed color
        points[opt.nb_points + index*6 + i].color = hsv2rgb(vec3(0.6 - 0.6*speed/opt.color,1,0.8));

        //is_near zero color
        /*if(is_zero_here)
            points[opt.nb_points + index*6 + i].color = vec3(1.0,0,0);
        else
            points[opt.nb_points + index*6 + i].color = vec3(0,0,1.0);
        if(index == 0)
            points[opt.nb_points + index*6 + i].color = vec3(0,1,0);*/

        //nb chuk color
        //float a = float(hash(chunk_coords))/opt.nb_chunks;
        //points[opt.nb_points + index*6 + i].color = vec3(rand(vec2(a,0.32)), rand(vec2(a,0.21)), rand(vec2(a,0.12)));
        
        //nb neighbors color
        //float a = float(9*opt.nb_particles)/float(opt.nb_chunks);
        //points[opt.nb_points + index*6 + i].color = vec3(clamp(0.5 + (float(p_count) - a)/1000.0,0.0,1.0),0,1);

        //is out of chunk bounds color
        /*if(hash(chunk_coords) >= 0 && hash(chunk_coords) < opt.nb_chunks)
        {
            points[opt.nb_points + index*6 + i].color = vec3(0,0,1);
        }
        else 
        {
            if(hash(chunk_coords) < 0)

                points[opt.nb_points + index*6 + i].color = vec3(0,1,0);
            else 
                points[opt.nb_points + index*6 + i].color = vec3(1,0,0);
            points[opt.nb_points + index*6 + i].pos = particlesNew[index].position + 1.0*cone[i];
        }*/
    }
}
