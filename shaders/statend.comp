#version 450

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
    vec3 camPosition;
    vec3 lightsource;
} ubo;

layout(binding = 1) uniform OptionBufferObject {
    float l0; // 0.04
    float k; //1.0
    float a; //0.05
    float g; //0.98 ?
    float delta_t; //variable 
    float max_dist; //1.0 - 1.1
    uint nb_particles; // 300000000000 !
    uint nb_triangles;
    uint nb_points;
    uint nb_chunks;
    float color; // ~ 3
    float epsilon; // 0.001
    float blending;
} opt;

struct Particle {
    vec3 position;
    vec3 velocity;
};

struct Vertex {
    vec3 pos;
    vec3 color;
};

struct Statend {
    uint start;
    uint end;
};


layout(std140, binding = 2) readonly buffer ParticleSSBOIn {
    Particle particlesOld[ ];
};

layout(std140, binding = 3)  buffer ParticleSSBOout {
    Particle particlesNew[ ];
};

layout(std140, binding = 4) buffer SommetsSSBOIn {
    Vertex points[ ];
};

layout(std430, binding = 5) buffer TrianglesSSBOIn {
    uint triangles[ ];
};

layout(std430, binding = 6) buffer ChunkSSBO {
    uint chunks[ ];
};
layout(std430, binding = 7) buffer IndexSSBOIn {
    uint particlesIndex[ ];
};

layout(std430, binding = 8) buffer ChunkIndexSSBOIn {
    Statend chunkIndex[ ];
};

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

uint dicotomie(uint val){
    uint a = 0;
    uint b = opt.nb_particles-1;
    while(a <= b)
    {
        uint c = (a+b)/2;
        if(chunks[c] == val)
            return(c);
        if(chunks[c] < val)
            a = c+1;
        else
            if(c != 0)
                b = c-1;
            else return(0);
    }
    return(0);
}

void main(){
    uint index = gl_GlobalInvocationID.x;
    //ici c'est nésséssaire.
    if(index >= opt.nb_chunks)
        return;
    uint c = dicotomie(int(index));
    if(chunks[c] == index)
    {
        int i = int(c);
        uint j = c+1;
        while(i >= 0 && chunks[i] == index)
            i -= 1;
        chunkIndex[index].start = uint(i+1);
        while(j < opt.nb_particles && chunks[j] == index)
            j += 1;
        chunkIndex[index].end = j;

    }
    else{
        chunkIndex[index].start = 0;
        chunkIndex[index].end = 0;
    }

}